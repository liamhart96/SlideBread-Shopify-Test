var p=Object.defineProperty;var u=(o,s,t)=>s in o?p(o,s,{enumerable:!0,configurable:!0,writable:!0,value:t}):o[s]=t;var i=(o,s,t)=>u(o,typeof s!="symbol"?s+"":s,t);import"./modulepreload-polyfill.B5Qt9EMX.min.js";class c extends HTMLElement{static get observedAttributes(){return["primary","accent","secondary","tertiary"]}constructor(){super(),this.colors={primary:"#314B54",accent:"#F18B6D",secondary:"#103F2C",tertiary:"#F3D9C6"},this.copiedColor=null,this.copiedText=null}connectedCallback(){this.render(),this.setupEventListeners()}attributeChangedCallback(s,t,e){t!==e&&["primary","accent","secondary","tertiary"].includes(s)&&(this.colors[s]=e,this.render())}adjustColor(s,t){s=s.replace("#","");const e=Number.parseInt(s.substring(0,2),16),r=Number.parseInt(s.substring(2,4),16),a=Number.parseInt(s.substring(4,6),16),n=Math.max(0,Math.min(255,e+t)),l=Math.max(0,Math.min(255,r+t)),d=Math.max(0,Math.min(255,a+t));return`#${n.toString(16).padStart(2,"0")}${l.toString(16).padStart(2,"0")}${d.toString(16).padStart(2,"0")}`}generateExtendedPalette(){return[{name:"Primary",hex:this.colors.primary,cssVar:"--color-primary",settingsVar:"settings.colors_primary",usage:"Headings, text, etc."},{name:"Accent",hex:this.colors.accent,cssVar:"--color-accent",settingsVar:"settings.colors_accent",usage:"Backgrounds, borders, etc."},{name:"Secondary",hex:this.colors.secondary,cssVar:"--color-secondary",settingsVar:"settings.colors_secondary",usage:"Secondary backgrounds, borders, etc."},{name:"Tertiary",hex:this.colors.tertiary,cssVar:"--color-tertiary",settingsVar:"settings.colors_tertiary",usage:"Light backgrounds"}].flatMap(t=>[{...t,name:`${t.name} Light`,hex:this.adjustColor(t.hex,30),cssVar:`${t.cssVar}-light`,settingsVar:`${t.settingsVar}_light`,usage:`Hover states for ${t.name.toLowerCase()} elements`,isVariation:!0},t,{...t,name:`${t.name} Dark`,hex:this.adjustColor(t.hex,-30),cssVar:`${t.cssVar}-dark`,settingsVar:`${t.settingsVar}_dark`,usage:`Active/pressed states for ${t.name.toLowerCase()} elements`,isVariation:!0}])}generateSettingsObject(){const t=this.generateExtendedPalette().reduce((e,r)=>{const a=r.settingsVar.split(".")[1];return e[a]=r.hex,e},{});return JSON.stringify(t,null,2)}generateCssVariables(){return`:root {
  --color-primary-light: {{ settings.colors_primary_light }};
  --color-primary: {{ settings.colors_primary }};
  --color-primary-dark: {{ settings.colors_primary_dark }};

  --color-accent-light: {{ settings.colors_accent_light }};
  --color-accent: {{ settings.colors_accent }};
  --color-accent-dark: {{ settings.colors_accent_dark }};

  --color-secondary-light: {{ settings.colors_secondary_light }};
  --color-secondary: {{ settings.colors_secondary }};
  --color-secondary-dark: {{ settings.colors_secondary_dark }};

  --color-tertiary-light: {{ settings.colors_tertiary_light }};
  --color-tertiary: {{ settings.colors_tertiary }};
  --color-tertiary-dark: {{ settings.colors_tertiary_dark }};
}`}setupEventListeners(){this.querySelectorAll(".color-swatch").forEach(s=>{s.addEventListener("click",t=>{const e=t.currentTarget.dataset.color;this.copyToClipboard(e)})}),this.querySelector(".copy-css-btn").addEventListener("click",()=>{this.copyTextToClipboard(this.generateCssVariables())}),this.querySelector(".copy-settings-btn").addEventListener("click",()=>{this.copyTextToClipboard(this.generateSettingsObject())})}copyToClipboard(s){navigator.clipboard.writeText(s),this.copiedColor=s,this.querySelectorAll(".color-swatch").forEach(t=>{if(t.dataset.color===s){const e=t.querySelector(".copy-indicator");e.textContent="Copied!",e.classList.remove("opacity-0"),e.classList.add("opacity-100"),setTimeout(()=>{e.classList.remove("opacity-100"),e.classList.add("opacity-0"),this.copiedColor=null},2e3)}})}copyTextToClipboard(s){navigator.clipboard.writeText(s),this.copiedText=s;const e=this.querySelector(s===this.generateCssVariables()?".copy-css-btn":".copy-settings-btn").querySelector(".copy-indicator");e.textContent="Copied!",e.classList.remove("opacity-0"),e.classList.add("opacity-100"),setTimeout(()=>{e.classList.remove("opacity-100"),e.classList.add("opacity-0"),this.copiedText=null},2e3)}render(){const s=this.generateExtendedPalette(),t=this.generateCssVariables();this.innerHTML=`
      <div class="max-w-7xl mx-auto p-5">
        <h1 class="text-2xl font-bold mb-2">Extended Color Palette</h1>
        <p class="mb-6 text-gray-600">Including lighter variations for hover states and darker variations for active states.</p>
        
        <div class="grid grid-cols-1 sm:grid-cols-3 gap-5 mb-8">
          ${s.map(e=>`
            <div class="color-swatch rounded-lg overflow-hidden shadow-md cursor-pointer relative" data-color="${e.hex}">
              <div class="h-24 flex items-end p-3" style="background-color: ${e.hex}">
                <div class="bg-white/90 px-2 py-1 rounded text-sm font-medium">${e.name}</div>
              </div>
              <div class="p-4 bg-white">
                <div class="flex justify-between items-center mb-1 font-mono">
                  <span>${e.hex}</span>
                  <span class="copy-indicator text-xs text-green-600 transition-opacity duration-200 opacity-0">Copied!</span>
                </div>
                <div class="font-mono text-xs text-gray-600 mb-1">${e.cssVar}</div>
                <div class="text-sm text-gray-600">${e.usage}</div>
              </div>
            </div>
          `).join("")}
        </div>
        
        <div class="bg-white rounded-lg shadow-sm p-5 mb-6">
          <h2 class="text-xl font-bold mb-4">CSS Variables Implementation</h2>
          <div class="relative bg-gray-100 rounded-lg p-4 mb-5 overflow-x-auto">
            <button class="copy-css-btn absolute top-2 right-2 bg-gray-200 hover:bg-gray-300 rounded px-3 py-1 text-sm flex items-center">
              Copy
              <span class="copy-indicator ml-1 text-xs text-green-600 transition-opacity duration-200 opacity-0">Copied!</span>
            </button>
            <pre class="font-mono text-sm whitespace-pre-wrap">${t}</pre>
          </div>
          
          <h3 class="text-lg font-bold mb-2">Usage Example</h3>
          <div class="bg-gray-100 rounded-lg p-4 overflow-x-auto">
            <pre class="font-mono text-sm whitespace-pre-wrap">.btn-primary {
              background-color: var(--color-primary);
              color: white;
            }

            .btn-primary:hover {
              background-color: var(--color-primary-light);
            }

            .btn-primary:active {
              background-color: var(--color-primary-dark);
            }

            .accent-border {
              border: 1px solid var(--color-accent);
            }

            .secondary-background {
              background-color: var(--color-secondary);
              color: white;
            }

            .tertiary-panel {
              background-color: var(--color-tertiary);
              color: var(--color-primary);
            }</pre>
          </div>
        </div>
        
        <div class="bg-white rounded-lg shadow-sm p-5">
          <h2 class="text-xl font-bold mb-4">Button Elements Preview</h2>
          
          <h3 class="text-lg font-bold mb-2">Primary Buttons</h3>
          <div class="flex flex-wrap gap-4 mb-6">
            <button class="px-4 py-2 rounded-md text-white" style="background-color: ${this.colors.primary};">Normal</button>
            <button class="px-4 py-2 rounded-md text-white" style="background-color: ${this.adjustColor(this.colors.primary,30)};">Hover</button>
            <button class="px-4 py-2 rounded-md text-white" style="background-color: ${this.adjustColor(this.colors.primary,-30)};">Active</button>
          </div>
          
          <h3 class="text-lg font-bold mb-2">Accent Buttons</h3>
          <div class="flex flex-wrap gap-4 mb-6">
            <button class="px-4 py-2 rounded-md text-white" style="background-color: ${this.colors.accent};">Normal</button>
            <button class="px-4 py-2 rounded-md text-white" style="background-color: ${this.adjustColor(this.colors.accent,30)};">Hover</button>
            <button class="px-4 py-2 rounded-md text-white" style="background-color: ${this.adjustColor(this.colors.accent,-30)};">Active</button>
          </div>

          <h3 class="text-lg font-bold mb-2">Secondary Buttons</h3>
          <div class="flex flex-wrap gap-4 mb-6">
            <button class="px-4 py-2 rounded-md text-white" style="background-color: ${this.colors.secondary};">Normal</button>
            <button class="px-4 py-2 rounded-md text-white" style="background-color: ${this.adjustColor(this.colors.secondary,30)};">Hover</button>
            <button class="px-4 py-2 rounded-md text-white" style="background-color: ${this.adjustColor(this.colors.secondary,-30)};">Active</button>
          </div>
          
          <h3 class="text-lg font-bold mb-2">Outline Accent Buttons</h3>
          <div class="flex flex-wrap gap-4 mb-6">
            <button class="px-4 py-2 rounded-md border-2" style="border-color: ${this.colors.accent}; color: ${this.colors.accent};">Normal</button>
            <button class="px-4 py-2 rounded-md border-2" style="border-color: ${this.adjustColor(this.colors.accent,30)}; color: ${this.adjustColor(this.colors.accent,30)};">Hover</button>
            <button class="px-4 py-2 rounded-md border-2" style="border-color: ${this.adjustColor(this.colors.accent,-30)}; color: ${this.adjustColor(this.colors.accent,-30)};">Active</button>
          </div>
          
          <h3 class="text-lg font-bold mb-2">Cards</h3>
          <div class="flex flex-wrap gap-4">
            <div class="p-4 rounded-md w-36" style="background-color: ${this.colors.tertiary};">
              <div style="color: ${this.colors.primary};">Normal Card</div>
            </div>
            <div class="p-4 rounded-md w-36" style="background-color: ${this.adjustColor(this.colors.tertiary,30)};">
              <div style="color: ${this.colors.primary};">Hover Card</div>
            </div>
            <div class="p-4 rounded-md w-36" style="background-color: ${this.adjustColor(this.colors.tertiary,-30)};">
              <div style="color: ${this.colors.primary};">Active Card</div>
            </div>
          </div>
        </div>
      </div>
    `}}i(c,"elementName","color-palette");customElements.define(c.elementName,c);
